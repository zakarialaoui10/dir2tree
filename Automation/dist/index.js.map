{"mappings":"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","sources":["index.js","../src/index.js","../src/utils/skip.js","../src/utils/sort.js","../src/utils/general.js","../src/utils/filter.js","../src/utils/stats.js"],"sourcesContent":["const fs=require(\"fs\")\r\nconst path=require(\"path\")\r\nconst dir2tree=require(\"../src/index.js\")\r\nconst ROOT = path.join(process.cwd(),'.',\"Articles\");\r\nconst TARGET = path.join(process.cwd(),\"Target\");\r\nconsole.log({ROOT,TARGET})\r\nconst MyTree = dir2tree(ROOT,{\r\n  fileContent:true,\r\n  sortBy:\"extension\",\r\n  skipFile:[\"ger.md\"],\r\n  skipFolder:[\"to be skipped\"],\r\n  skipExtension:[\"sd\"],\r\n});\r\n\r\nconsole.log(MyTree.tree)\r\nMyTree.write(process.cwd(),\"generated.json\")\r\n\r\n","const fs = require(\"fs\");\r\nconst path = require(\"path\");\r\nconst {mapfun,flat_obj}=require(\"mapfun\")\r\nconst {should_skip_file,should_skip_folder}=require(\"./utils/skip.js\");\r\nconst {sort_files}=require(\"./utils/sort.js\");\r\nconst {filter_files}=require(\"./utils/filter.js\");\r\nconst {add_to_tree}=require(\"./utils/general.js\");\r\nconst {file_metadata}=require(\"./utils/stats.js\");\r\n\r\nclass Dir2Tree {\r\n  constructor(root, options = {}, callbacks = {}) {\r\n    this.root = root;\r\n    this.options = options;\r\n    this.callbacks = callbacks;\r\n    this.tree = {};\r\n    this.sortBy = options.sortBy || \"name\";\r\n    this.generate();\r\n  }\r\n  generate() {\r\n    const stats = fs.statSync(this.root);\r\n    if (!stats.isDirectory()) return null;\r\n    const files = fs.readdirSync(this.root);\r\n    const FILTRED_FILES = filter_files.call(this, files);\r\n    const SORTED_FILES = sort_files.call(this, FILTRED_FILES);\r\n\r\n    SORTED_FILES.forEach((file) => {\r\n      const filePath = path.join(this.root, file);\r\n      if(should_skip_folder.call(this,file))return;\r\n      const fileStats = fs.statSync(filePath);\r\n      if(fileStats.isDirectory()){\r\n        const subDirectory = new Dir2Tree(\r\n          filePath,\r\n          this.options,\r\n          this.callbacks\r\n        );\r\n        Object.assign(this.tree,{[path.basename(filePath)]:subDirectory.tree})\r\n        return this\r\n      }\r\n      const fileName = path.parse(file).name;\r\n      if (should_skip_file.call(this, filePath)) return;\r\n        if (this.options?.fileContent) {\r\n          this.addFileInfo(filePath, fileName);\r\n        }\r\n      \r\n    });\r\n    //this.tree=tree;\r\n    return this.tree;\r\n  }\r\n  addFileInfo(filePath, fileName) {\r\n    const content = fs.readFileSync(filePath, \"utf8\");\r\n    const fileInfo = {};\r\n    const stats = {};\r\n    const fullName = path.basename(filePath);\r\n    const [name, extension] = fullName.split(\".\");\r\n    const length = fs.statSync(filePath).size;\r\n    const lines = content.split(\"\\n\").length;\r\n    const metadata = file_metadata.call(this, filePath);\r\n    if (this.options?.fileContent) Object.assign(fileInfo, { content });\r\n    if (this.options?.fileExtension) Object.assign(fileInfo, { extension });\r\n    if (this.options?.fileName) Object.assign(fileInfo, { name });\r\n    Object.assign(stats, { length });\r\n    Object.assign(stats, { size: length / 1024 });\r\n    Object.assign(stats, { lines });\r\n    Object.assign(fileInfo, { stats });\r\n    Object.assign(fileInfo, { metadata });\r\n    this?.callbacks?.map((n) => n(filePath, fileInfo));\r\n    add_to_tree.call(this,fileName+\"_\"+extension, fileInfo);\r\n  }\r\n  \r\n  write(Target, filename) {\r\n    const jsonTree = JSON.stringify(this.tree, null, 2); // Pretty-print the JSON\r\n    const filePath = path.join(Target, filename); // Construct the file path\r\n    fs.writeFileSync(filePath, jsonTree, 'utf8');\r\n    console.log(`Tree written to ${filePath}`);\r\n    return this;\r\n  }\r\n  flat(depth=1,separator=\"_\"){\r\n    this.tree=flat_obj(this.tree,depth,separator);\r\n    return this;\r\n  }\r\n  reduce(){\r\n    return this;\r\n  }\r\n  sort(){\r\n    return this;\r\n  }\r\n  filter(){\r\n    return this;\r\n  }\r\n  map(callback,options={}){\r\n    this.tree=mapfun(callback,options,this.tree);\r\n    return this;\r\n  }\r\n}\r\nconst dir2tree = (root, options, callbacks=[]) => new Dir2Tree(root, options, callbacks);\r\nmodule.exports = dir2tree;\r\n","const path = require(\"path\");\r\nfunction should_skip_file(filePath) {\r\n    const normalizedPath = path.normalize(filePath);\r\n    if (\r\n      this?.options?.skip?.folder?.includes(path.basename(normalizedPath)) ||\r\n      this?.options?.skip?.file?.includes(path.basename(normalizedPath)) ||\r\n      this?.options?.skip?.extension?.includes(\r\n        path.extname(normalizedPath).slice(1)\r\n      )\r\n    )return true;\r\n    return false;\r\n  }\r\nfunction should_skip_folder(filePath) {\r\n  if (typeof filePath !== 'string') return false;\r\n  const normalizedPath = path.normalize(filePath);\r\n  if (this?.options?.skipFolder?.includes(path.basename(normalizedPath)))\r\n    return true;\r\n  return false;\r\n  }\r\nmodule.exports={should_skip_file,should_skip_folder}\r\n","const path=require(\"path\");\r\nconst fs=require(\"fs\")\r\nconst {is_directory}=require(\"./general.js\");\r\nfunction sort_files(files, order = 1) {\r\n    return files.sort((a, b) => {\r\n      const filePathA = path.join(this.root, a);\r\n      const filePathB = path.join(this.root, b);\r\n  \r\n      // Check if either of the files is a directory and handle accordingly\r\n      const isDirectoryA = is_directory(filePathA);\r\n      const isDirectoryB = is_directory(filePathB);\r\n  \r\n      if (isDirectoryA && !isDirectoryB) {\r\n        return -1; // Directories come before files\r\n      } else if (!isDirectoryA && isDirectoryB) {\r\n        return 1; // Files come after directories\r\n      }\r\n  \r\n      if (isDirectoryA && isDirectoryB) {\r\n        return a.localeCompare(b); // Sort directories by name\r\n      }\r\n  \r\n      // If both are files, perform the sorting based on your criteria\r\n      const statsA = fs.statSync(filePathA);\r\n      const statsB = fs.statSync(filePathB);\r\n      const extensionA = path.extname(filePathA).slice(1);\r\n      const extensionB = path.extname(filePathB).slice(1);\r\n      const linesA = fs.readFileSync(filePathA, \"utf8\").split(\"\\n\").length;\r\n      const linesB = fs.readFileSync(filePathB, \"utf8\").split(\"\\n\").length;\r\n  \r\n      // Customize sorting based on sortBy option (name, size, created, modified, extension, lines, path, etc.)\r\n      switch (this.sortBy.toLowerCase()) {\r\n        case \"name\":\r\n          return order * a.localeCompare(b);\r\n        case \"size\":\r\n          return order * (statsA.size - statsB.size);\r\n        case \"created\":\r\n          return order * (statsA.birthtime - statsB.birthtime);\r\n        case \"modified\":\r\n          return order * (statsA.mtime.getTime() - statsB.mtime.getTime());\r\n        case \"extension\":\r\n          return order * extensionA.localeCompare(extensionB);\r\n        case \"lines\":\r\n          return order * (linesA - linesB);\r\n        case \"path\":\r\n          return order * filePathB.localeCompare(filePathA);\r\n        default:\r\n          return 0;\r\n      }\r\n    });\r\n  }\r\n\r\nmodule.exports={sort_files}\r\n","const fs=require(\"fs\");\r\nconst path=require(\"path\")\r\nfunction is_directory(filePath) {\r\n    return fs.statSync(filePath).isDirectory();\r\n  }\r\nfunction add_to_tree(key, value) {\r\n  const keys = key.split(path.sep);\r\n  const lastKeyIndex = keys.length - 1;\r\n  keys.reduce((subtree, currentKey, index) => {\r\n    if (!subtree[currentKey]) {\r\n      subtree[currentKey] = index === lastKeyIndex ? value : {};\r\n    }\r\n    return subtree[currentKey];\r\n  }, this.tree);\r\n}\r\nmodule.exports={is_directory,add_to_tree}\r\n","const path=require(\"path\");\r\nconst {is_directory}=require(\"./general.js\");\r\nconst {should_skip_file}=require(\"./skip.js\")\r\nfunction filter_files(files) {\r\n    return files.filter((file) => {\r\n      if (is_directory(path.join(this.root, file))) {\r\n        return true; // Skip directories\r\n      }\r\n      const filePath = path.join(this.root, file);\r\n      const shouldSkip = should_skip_file.call(this, filePath);\r\n      return !shouldSkip;\r\n    });\r\n  }\r\nmodule.exports={filter_files}\r\n","const fs=require(\"fs\");\r\nfunction file_metadata(filePath) {\r\n    const stats = fs.statSync(filePath);\r\n    const metadata = {\r\n      created: stats.birthtime,\r\n      modified: stats.mtime,\r\n      permissions: stats.mode,\r\n    };\r\n    return metadata;\r\n  }\r\nmodule.exports={file_metadata}\r\n"],"names":[],"version":3,"file":"index.js.map"}